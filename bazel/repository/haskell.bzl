load("@bazel_skylib//lib:paths.bzl", "paths")
load(
    "@io_tweag_rules_nixpkgs//nixpkgs:nixpkgs.bzl",
    "nixpkgs_cc_configure",
    "nixpkgs_local_repository",
    "nixpkgs_package",
)
load("@rules_haskell//haskell:nixpkgs.bzl", "haskell_register_ghc_nixpkgs")
load("@rules_haskell//haskell:cabal.bzl", "stack_snapshot")
load("@rules_haskell//haskell:repositories.bzl", "rules_haskell_dependencies")
load("@rules_haskell//tools:repositories.bzl", "rules_haskell_worker_dependencies")

def setup_haskell():
    # Import external repositories that `rules_haskell` needs to work properly.
    rules_haskell_dependencies()

    nixpkgs_local_repository(
        name = "haskell_nixpkgs",
        nix_file = "//nix/haskell:default.nix",
    )

    nixpkgs_cc_configure(
        repository = "@haskell_nixpkgs",
    )

    haskell_register_ghc_nixpkgs(
        version = "8.6.5",
        repository = "@haskell_nixpkgs",
        attribute_path = "haskellPackages.ghc",
        compiler_flags = [
            "-Wall",
        ],
    )

    nixpkgs_package(
        name = "haskell_nixpkgs_stack",
        repository = "@haskell_nixpkgs",
        attribute_path = "haskellPackages.stack",
    )

    nixpkgs_package(
        name = "haskell_nixpkgs_alex",
        repository = "@haskell_nixpkgs",
        attribute_path = "haskellPackages.alex",
    )

    nixpkgs_package(
        name = "haskell_nixpkgs_c2hs",
        repository = "@haskell_nixpkgs",
        attribute_path = "haskellPackages.c2hs",
    )

    nixpkgs_package(
        name = "haskell_nixpkgs_happy",
        repository = "@haskell_nixpkgs",
        attribute_path = "haskellPackages.happy",
    )

    nixpkgs_cc_library_package(
        name = "haskell_nixpkgs_postgresql",
        repository = "@haskell_nixpkgs",
        attribute_paths = ["postgresql", "postgresql.lib"],
        cc_library = dict(
            name = "c_lib",
            srcs = [":lib"],
            hdrs = [":include"],
            strip_include_prefix = "include",
            visibility = ["//visibility:public"],
            linkstatic = True,
        ),
    )

    nixpkgs_cc_library_package(
        name = "haskell_nixpkgs_zlib",
        repository = "@haskell_nixpkgs",
        attribute_paths = ["zlib_both.dev", "zlib_both.out"],
        cc_library = dict(
            name = "c_lib",
            srcs = [":lib"],
            hdrs = [":include"],
            strip_include_prefix = "include",
            visibility = ["//visibility:public"],
            linkstatic = True,
        ),
    )

    stack_snapshot(
        name = "stackage",
        snapshot = "lts-14.4",
        stack = "@haskell_nixpkgs_stack//:bin/stack",
        packages = [
            # Core libraries
            "array",
            "base",
            "bytestring",
            "containers",
            "deepseq",
            "directory",
            "filepath",
            "ghc-heap",
            "mtl",
            "process",
            "text",
            "template-haskell",

            # Hackage dependencies
            "Decimal",
            "Diff",
            "Glob",
            "HTTP",
            "MissingH",
            "MonadRandom",
            "QuickCheck",
            "aeson",
            "aeson-casing",
            "aeson-extra",
            "aeson-pretty",
            "aeson-qq",
            "array",
            "asn1-encoding",
            "asn1-types",
            "async",
            "attoparsec",
            "bank-holidays-england",
            "barbies",
            "base",
            "base-compat-batteries",
            "base-orphans",
            "base16-bytestring",
            "base32string",
            "base64-bytestring",
            "bazel-runfiles",
            "bifunctors",
            "bimap",
            "binary",
            "blaze-builder",
            "blaze-html",
            "blaze-markup",
            "bytestring",
            "call-stack",
            "case-insensitive",
            "casing",
            "cassava",
            "cassava-conduit",
            "cipher-aes",
            "clock",
            "conduit",
            "conduit-combinators",
            "conduit-extra",
            "conduit-throttle",
            "connection",
            "constraints",
            "containers",
            "contravariant",
            "cookie",
            "crypto-pubkey",
            "cryptohash",
            "cryptohash-sha256",
            "cryptonite",
            "data-default",
            "data-default-class",
            "deepseq",
            "dependent-map",
            "dependent-sum",
            "dependent-sum-template",
            "directory",
            "directory-tree",
            "dlist",
            "dns",
            "double-conversion",
            "either",
            "ekg-core",
            "ekg-json",
            "ekg-statsd",
            "email-validate",
            "entropy",
            "envy",
            "errors",
            "exceptions",
            "extra",
            "fb",
            "file-embed",
            "filepath",
            "fixed",
            "focus",
            "formatting",
            "free",
            "generic-arbitrary",
            "generic-data",
            "generic-deriving",
            "generic-lens",
            "ghc",
            "ghc-prim",
            "hashable",
            "hashable-time",
            "haskell-src-meta",
            "hasql",
            "hedgehog",
            "hedis",
            "hoogle",
            "hsass",
            "hspec",
            "hspec-core",
            "hspec-expectations-pretty-diff",
            "hspec-wai",
            "hspec-wai-json",
            "html-entities",
            "htoml",
            "http-api-data",
            "http-client",
            "http-client-tls",
            "http-conduit",
            "http-media",
            "http-reverse-proxy",
            "http-types",
            "hvect",
            "immortal",
            "insert-ordered-containers",
            "interpolate",
            "interpolatedstring-perl6",
            "io-streams",
            "iso8601-time",
            "jose",
            "katip",
            "lens",
            "lens-aeson",
            "lens-datetime",
            "lifted-async",
            "lifted-base",
            "list-t",
            "lrucaching",
            "lucid",
            "mainland-pretty",
            "megaparsec",
            "memory",
            "mime-mail",
            "mmorph",
            "monad-control",
            "monad-logger",
            "monad-time",
            "monad-unlift",
            "mono-traversable",
            "mtl",
            "mtl-compat",
            "mutable-containers",
            "neat-interpolation",
            "network",
            "network-uri",
            "newtype-generics",
            "nonempty-containers",
            "old-locale",
            "options",
            "optparse-applicative",
            "ordered-containers",
            "pandoc",
            "pandoc-types",
            "parsec",
            "path",
            "path-io",
            "path-pieces",
            "pcre-heavy",
            "postgresql-libpq",
            "postgresql-simple",
            "pretty",
            "pretty-show",
            "pretty-simple",
            "prettyprinter",
            "primitive",
            "process",
            "prometheus-client",
            "protolude",
            "psqueues",
            "purescript-bridge",
            "quickcheck-arbitrary-adt",
            "quickcheck-instances",
            "random",
            "random-shuffle",
            "raw-strings-qq",
            "reflection",
            "regex-base",
            "regex-compat",
            "regex-pcre",
            "regex-tdfa",
            "regex-tdfa-text",
            "req",
            "resourcet",
            "retry",
            "rio",
            "safe",
            "safe-exceptions",
            "safe-money",
            "scientific",
            "scotty",
            "semigroupoids",
            "semigroups",
            "semver",
            "servant",
            "servant-auth-swagger",
            "servant-cassava",
            "servant-client",
            "servant-client-core",
            "servant-foreign",
            "servant-multipart",
            "servant-server",
            "servant-swagger",
            "servant-swagger-ui-redoc",
            "singletons",
            "soap",
            "split",
            "sqlite-simple",
            "stm",
            "stm-chans",
            "streaming",
            "strict",
            "string-conv",
            "string-conversions",
            "swagger2",
            "syb",
            "tagged",
            "tasty",
            "tasty-expected-failure",
            "tasty-hedgehog",
            "tasty-hspec",
            "tasty-hunit",
            "tasty-quickcheck",
            "template-haskell",
            "temporary",
            "text",
            "text-format",
            "th-abstraction",
            "th-extras",
            "th-lift-instances",
            "these",
            "time",
            "titlecase",
            "tls",
            "transformers",
            "transformers-base",
            "turtle",
            "tz",
            "unbounded-delays",
            "unix",
            "unliftio",
            "unliftio-core",
            "unordered-containers",
            "utf8-string",
            "uuid",
            "uuid-types",
            "validation",
            "vector",
            "wai",
            "wai-cors",
            "wai-extra",
            "wai-logger",
            "warp",
            "websockets",
            "wreq",
            "x509-system",
            "xlsx",
            "xml",
            "xml-conduit",
            "xml-types",
            "xmlbf",
            "xmlbf-xeno",
            "yaml",
            "zip-archive",
            "zlib",
        ],
        tools = [
            "@haskell_nixpkgs_alex//:bin/alex",
            "@haskell_nixpkgs_c2hs//:bin/c2hs",
            "@haskell_nixpkgs_postgresql//:bin/pg_config",
            "@haskell_nixpkgs_happy//:bin/happy",
        ],
        extra_deps = {
            "postgresql-libpq": [
                "@haskell_nixpkgs_postgresql//:c_lib",
            ],
            "zlib": [
                "@haskell_nixpkgs_zlib//:c_lib",
            ],
        },
    )

    # We shouldn't need this but otherwise using `bazel query` may fail.
    # See https://github.com/tweag/rules_haskell/issues/1078
    rules_haskell_worker_dependencies()

def nixpkgs_cc_library_package(
    name,
    repository,
    cc_library,
    attribute_paths = None,
    only_libs = None,
    **kwargs):

    if attribute_paths:
        nix_file_content = "\n".join([
            "with (import <nixpkgs> { config = {}; overlays = []; });",
            'buildEnv {name = "%s"; paths = [ %s ]; }' % (name, " ".join(attribute_paths)),
        ])
        kwargs = dict(kwargs, nix_file_content = nix_file_content)

    only_libs = only_libs or ["**/*"]
    libs = [paths.join("lib", lib) + ext for lib in only_libs for ext in [".so*", ".dylib", ".a"]]

    build_file_lines = (
        [
            'package(default_visibility = ["//visibility:public"])',
            "",
            "filegroup(",
            '    name = "bin",',
            '    srcs = glob(["bin/*"]),',
            ")",
            "",
            "filegroup(",
            '    name = "lib",',
            "    srcs = glob(%r)" % libs,
            ")",
            "",
            "filegroup(",
            '    name = "include",',
            '    srcs = glob(["include/**/*.h"]),',
            ")",
            "",
            "cc_library(",
        ] +
        ["    %s = %r," % (k, v) for k, v in cc_library.items()] +
        [")"]
    )

    nixpkgs_package(
        name = name,
        repository = repository,
        build_file_content = "\n".join(build_file_lines),
        **kwargs
    )
